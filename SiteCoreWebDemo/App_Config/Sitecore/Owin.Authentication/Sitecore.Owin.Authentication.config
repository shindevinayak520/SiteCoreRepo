<?xml version="1.0" encoding="utf-8"?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/" xmlns:security="http://www.sitecore.net/xmlconfig/security/">
  <sitecore role:require="Standalone or ContentDelivery or ContentManagement">

    <!-- IDENTITY PROCESSING PATH PREFIX variable
         Specifies the path prefix that should only be processed by OWIN middlewares.
         Paths that start with this prefix will not be handled by "httpRequestBegin" pipeline.
    -->
    <sc.variable name="identityProcessingPathPrefix" value="/identity/" />

    <!-- LOGIN PATH variable
         Specifies the login path prefix for federated authentication. It should be used in the "site" nodes in the "loginPage" attribute.
         The full login path must have this structure:
         $(loginPath)site_name/identity_provider
         or
         $(loginPath)site_name/identity_provider/inner_identity_provider,
         The site_name must have the "name" attribute value of the "site" node where the login path is set.
         The "identity_provider" must have the "id" attribute value of the configured identity provider that you want to use.
         The "inner_identity_provider" must be equal to the name or AuthenticationScheme of the underlying identity provider in the "identity_provider".
         
         Note: The "inner_identity_provider" value is sent to the "identity_provider" as an acr_value - idp:inner_identity_provider. Thus, identity_provider have to support acr_value.
         
         Examples:
             <sites>
                 <site name="shell" set:loginPage="$(loginPath)shell/IdentityServer"/>
                 <site name="admin" set:loginPage="$(loginPath)admin/IdentityServer/IdS4-AzureAd"/>
             </sites> -->
    <sc.variable name="loginPath" value="$(identityProcessingPathPrefix)login/" />

    <settings>
      <!--  OWIN AUTHENTICATION ENABLED
            Determines if OWIN based authentication is enabled.
            
            Default value: true -->
      <setting name="Owin.Authentication.Enabled" value="true" security:require="Sitecore" />

      <!--  FEDERATED AUTHENTICATION ENABLED
            Determines if federated authentication is enabled. Sitecore federated authentication is based on OWIN authentication,
            To enable federated authentication, you must enable "Owin.Authentication.Enabled".
            
            Default value: true -->
      <setting name="FederatedAuthentication.Enabled" value="true" security:require="Sitecore" />

      <setting name="FederatedAuthentication.IdentityProcessingPathPrefix" value="$(identityProcessingPathPrefix)" />

      <!--  CACHING OWIN TRANSFORMED IDENTITIES CACHE SIZE
            Determines the size of the TransformedIdentitiesCacheSize cache, which improves
            the performance of the Bearer Token authentication.
            Specify the value in bytes or append the value with KB, MB or GB
            
            Default value: 50MB -->
      <setting name="Caching.Owin.TransformedIdentitiesCacheSize" value="50MB" />
    </settings>

    <services>
      <configurator type="Sitecore.Owin.Authentication.Infrastructure.ServicesConfigurator, Sitecore.Owin.Authentication" />
    </services>

    <pipelines>
      <httpRequestBegin>
        <processor type="Sitecore.Pipelines.HttpRequest.IgnoreList, Sitecore.Kernel">
          <prefixes>
            <prefix name="identityProcessing">$(identityProcessingPathPrefix)</prefix>
          </prefixes>
        </processor>
      </httpRequestBegin>
      <owin.initialize>
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.DefineOwinAuthenticationState, Sitecore.Owin.Authentication"
                   resolve="true" patch:after="processor[@type='Sitecore.Owin.Pipelines.Initialize.SetLoggerFactory, Sitecore.Owin']" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.ValidateFederatedAuthenticationState, Sitecore.Owin.Authentication"
                   resolve="true" patch:before="processor[@method='Authenticate']" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.HandlePostLogoutUrl, Sitecore.Owin.Authentication"
                   resolve="true" patch:before="processor[@method='Authenticate']" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.InjectOwinDependencies, Sitecore.Owin.Authentication"
                   resolve="true" patch:before="processor[@method='Authenticate']" />
        <processor name="CookieAuthentication" type="Sitecore.Owin.Authentication.Pipelines.Initialize.CookieAuthentication, Sitecore.Owin.Authentication"
                   resolve="true" patch:before="processor[@method='Authenticate']">
          <!-- Controls how much time the cookie will remain valid from the point it is created.
             Format: d:hh:mm:ss

             No matter the cookie is persistent or not, OWIN authentication will not pass the expired cookie.
             ExpireTimeSpan could be overwritten by the http://www.sitecore.net/identity/claims/cookieExp claim where
             the claim value is Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z. -->
          <ExpireTimeSpan>00:30:00</ExpireTimeSpan>
          <SlidingExpiration>true</SlidingExpiration>
        </processor>
        <processor name="PreviewCookieAuthentication" type="Sitecore.Owin.Authentication.Pipelines.Initialize.PreviewCookieAuthentication, Sitecore.Owin.Authentication"
                   resolve="true" patch:before="processor[@method='Authenticate']">
          <!-- Controls how much time the authentication cookie for Preview mode will remain valid from the point it is created.
             Format: d:hh:mm:ss -->
          <ExpireTimeSpan>00:30:00</ExpireTimeSpan>
          <SlidingExpiration>true</SlidingExpiration>
        </processor>
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.ExternalCookieAuthentication, Sitecore.Owin.Authentication"
                   resolve="true" patch:before="processor[@method='Authenticate']" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.AddIdentityProviders, Sitecore.Owin.Authentication"
                   resolve="true" patch:before="processor[@method='Authenticate']" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.WindowsAzureActiveDirectoryBearerAuthentication, Sitecore.Owin.Authentication"
                   resolve="true" patch:before="processor[@method='Authenticate']">
          <IdentityProviderName></IdentityProviderName>
          <ApplicationId></ApplicationId>
          <!-- You must set the MetadataAddress. 
               When you use Azure AD B2C tokens, set the MetadataAddress to:
               https://login.microsoftonline.com/[my-tenant].onmicrosoft.com/v2.0/.well-known/openid-configuration?p=[my-B2C_1_SignUpPolicy]
          -->
          <MetadataAddress></MetadataAddress>
          <TenantId></TenantId>
        </processor>
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.TryTriggerExternalLogout, Sitecore.Owin.Authentication"
                   resolve="true" patch:after="processor[@method='Authenticate']" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.HandleLoginLink, Sitecore.Owin.Authentication" resolve="true" />
      </owin.initialize>

      <owin.identityProviders help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.IdentityProviders.IdentityProvidersProcessor">
        <!--Place the provider initialize class here. You can use the custom configuration file in the Include folder - just create a new file or use the existing file.
            For example:
            <processor type="Sitecore.Owin.Authentication.Samples.AzureAd.Pipelines.IdentityProviders.AzureAd, Sitecore.Owin.Authentication.Samples.AzureAd" resolve="true" />-->
      </owin.identityProviders>

      <owin.cookieAuthentication.validateIdentity help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateIdentityProcessor">
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateForUnresolvedSiteContext, Sitecore.Owin.Authentication" />
        <!-- There are scenarios when some URIs are resolved with the 'website' context, but should be executed within the 'shell' context instead.
             Example: /sitecore/api/ssc/ListManagement/List/Recent?pageSize=6&pageIndex=1&payLoad=full&language=en&searchExpression=&sc_lang=en
             If an external identity provider is configured to only be used with the 'shell' site, we must be able to use a user from that provider
             to make the authorized request. Use this processor to specify these paths.

             Note: if you need to omit the execution of this processor for some URIs (e.x. for API requests from website on CM),
             add the "sc_site=..." query parameter to the requested URI. -->
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateSiteNeutralPaths, Sitecore.Owin.Authentication">
          <siteNeutralPaths hint="list">
            <path>/sitecore/api/ssc/</path>
            <path>/api/sitecore/</path>
            <path>/-/speak/</path>
          </siteNeutralPaths>
        </processor>
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.CheckIdentityProvider, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ResolveToDefaultAuthenticationSourceOnly, Sitecore.Owin.Authentication">
          <paths hint="list">
          </paths>
        </processor>
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.CheckSiteMode, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.VerifyPreviewUser, Sitecore.Owin.Authentication" resolve="true" />
      </owin.cookieAuthentication.validateIdentity>

      <owin.cookieAuthentication.signIn help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.SignInProcessor">
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.RemoveTicket, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.ResolveUser, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.ClearCache, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.UpdateUserProperties, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.CheckClientUser, Sitecore.Owin.Authentication" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.SetCookieLifetime, Sitecore.Owin.Authentication" resolve="true" />
      </owin.cookieAuthentication.signIn>

      <owin.cookieAuthentication.signedIn help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.SignedInProcessor">
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.CleanupUserProfile, Sitecore.Owin.Authentication" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.GetStartUrl, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.CreateTicket, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.CheckDomainGuard, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.ApplyRedirect, Sitecore.Owin.Authentication" resolve="true" />
      </owin.cookieAuthentication.signedIn>

      <owin.cookieAuthentication.applyRedirect help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.ApplyRedirectProcessor">
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.SkipFormsAuthenticationRequest, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.SkipAjaxRequest, Sitecore.Owin.Authentication" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.GoToLoginPage, Sitecore.Owin.Authentication" />
      </owin.cookieAuthentication.applyRedirect>

      <owin.cookieAuthentication.signOut help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.SignOutProcessor">
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.CheckUser, Sitecore.Owin.Authentication" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.ClearRecentDocuments, Sitecore.Owin.Authentication" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.RemoveTicket, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.ClearCache, Sitecore.Owin.Authentication" resolve="true" />
      </owin.cookieAuthentication.signOut>

      <getSignInUrlInfo>
        <processor type="Sitecore.Owin.Authentication.Pipelines.GetSignInUrlInfo.GetExternalSignInUrlInfo, Sitecore.Owin.Authentication" resolve="true" />
      </getSignInUrlInfo>

      <fedauth.siteNameExpander help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.SiteNameExpander.SiteNameExpanderProcessor">
        <processor type="Sitecore.Owin.Authentication.Pipelines.SiteNameExpander.RegExpExpander, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.SiteNameExpander.DatabaseExpander, Sitecore.Owin.Authentication" resolve="true" />
        <processor type="Sitecore.Owin.Authentication.Pipelines.SiteNameExpander.DomainExpander, Sitecore.Owin.Authentication" resolve="true" />
      </fedauth.siteNameExpander>

      <owin.globalExceptionHandler>
        <!-- Handles the 'IDX10311 Nonce is missing' error code. -->
        <processor type="Sitecore.Owin.Authentication.Pipelines.GlobalExceptionHandler.NonceMissing, Sitecore.Owin.Authentication" resolve="true" patch:before="processor[@name='DefaultExceptionHandler']" />
        <!-- Handles IDX10803 and IDX20803 error codes.
             If 'UseFallbackLoginPage' is set to 'true' and the current site is either 'shell', 'modules_shell', or 'admin' the user is redirected to the 'FallbackLoginPage'
             in 'FallbackLoginPageRedirectTimeout' seconds. If 'FallbackLoginPageRedirectTimeout' is more than 0, an error is shown for 'FallbackLoginPageRedirectTimeout' seconds. -->
        <processor type="Sitecore.Owin.Authentication.Pipelines.GlobalExceptionHandler.IdentityProviderIsInaccessible, Sitecore.Owin.Authentication" resolve="true" patch:before="processor[@name='DefaultExceptionHandler']">
          <UseFallbackLoginPage>true</UseFallbackLoginPage>
          <FallbackLoginPageRedirectTimeout>0</FallbackLoginPageRedirectTimeout>
          <FallbackLoginPage>/sitecore/login?fbc=1</FallbackLoginPage>
        </processor>
      </owin.globalExceptionHandler>

      <owin.globalLogFilter>
        <!-- Downgrade the log level from Warning to Verbose for OpenIdConnect "The state field is missing or invalid." error message -->
        <processor type="Sitecore.Owin.Authentication.Pipelines.GlobalLogFilter.DowngradeOidcInvalidStateFieldMessage, Sitecore.Owin.Authentication" resolve="true" />
      </owin.globalLogFilter>
    </pipelines>

    <federatedAuthentication type="Sitecore.Owin.Authentication.Configuration.FederatedAuthenticationConfiguration, Sitecore.Owin.Authentication">
      <identityProvidersPerSites hint="list:AddIdentityProvidersPerSites">
        <!-- Defines a list of providers assigned to all sites. -->
        <mapEntry name="all sites" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication" resolve="true">
          <!-- The list of site names for which the specified identity providers will work.
               Note: the fedauth.siteNameExpander pipeline processes each site name, which gives the ability to use expressions like
               "regexp:modules_.*" or "database:web" or "domain:extranet" -->
          <sites hint="list">
            <site>regexp:.*</site>
          </sites>
          <identityProviders hint="list:AddIdentityProvider">
            <!-- An example of adding the AzureAd identity provider as the allowed provider for the specified sites. -->
            <!--
                <identityProvider ref="federatedAuthentication/identityProviders/identityProvider[@id='AzureAd']" />
            -->
          </identityProviders>
          <externalUserBuilder type="Sitecore.Owin.Authentication.Services.DefaultExternalUserBuilder, Sitecore.Owin.Authentication" resolve="true">
            <IsPersistentUser>true</IsPersistentUser>
          </externalUserBuilder>
        </mapEntry>
        <mapEntry name="sites with the web database" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication" resolve="true">
          <sites hint="list">
            <site>database:web</site>
          </sites>
          <identityProviders hint="list:AddIdentityProvider">
          </identityProviders>
        </mapEntry>
        <mapEntry name="sites with the core and unspecified database" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication" resolve="true">
          <sites hint="list">
            <site>database:core</site>
            <site>database:</site>
          </sites>
          <identityProviders hint="list:AddIdentityProvider">
          </identityProviders>
        </mapEntry>
        <mapEntry name="sites with extranet domain" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication" resolve="true">
          <sites hint="list">
            <site>domain:extranet</site>
          </sites>
          <identityProviders hint="list:AddIdentityProvider">
          </identityProviders>
        </mapEntry>
        <mapEntry name="admin site" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication" resolve="true">
          <sites hint="list">
            <site>admin</site>
          </sites>
          <identityProviders hint="list:AddIdentityProvider">
          </identityProviders>
        </mapEntry>
      </identityProvidersPerSites>

      <identityProviders hint="list:AddIdentityProvider">
        <!-- To add a provider, use the custom configuration file in the 'Include' folder - just create a new file or use the existing file. 
             In the 'configuration/sitecore/federatedAuthentication/identityProviders' section, create a new node called 'identityProvider'. Fill in the 'id' and 'type' attributes. 
             In the new node, fill in the child nodes: 'param', 'caption', 'domain', and 'transformations'. 
             About transformations: because of the need to have an idp claim, it is recommended that you apply the 'setIdpClaim' transformation and then the custom one(s).
             An example of a provider:-->
        <!--<identityProvider id="AzureAd" type="Sitecore.Owin.Authentication.Configuration.DefaultIdentityProvider, Sitecore.Owin.Authentication">
              <param desc="name">$(id)</param>
              <param desc="domainManager" type="Sitecore.Abstractions.BaseDomainManager" resolve="true" />
              <caption>Log in with Microsoft Azure</caption>
              <icon>/sitecore/shell/themes/standard/Custom/24x24/msazure.png</icon>
              <domain>sitecore</domain>
              <enabled>true</enabled>
              <transformations hint="list:AddTransformation">
                  <transformation type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
                      <sources hint="raw:AddSource">
                          <claim name="groups" value="f04b11c5-323f-41e7-ab2b-d70cefb4e8d0" />
                      </sources>
                      <targets hint="raw:AddTarget">
                          <claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" value="Sitecore\Developer" />
                      </targets>
                      <keepSource>true</keepSource>
                  </transformation>
              </transformations>
          </identityProvider>-->
        <!-- This is a provider with the id=AzureAd. It has the Default transformation and the specific key for this provider transformation.
             Note: you must have the transformation in the configuration with specific key otherwise the instance will fail. 
             The example transformation with the 'key=AzureAd' should be in the configuration file. How to add a transformation is described later in this file.-->
      </identityProviders>

      <!--  List of all the shared transformations-->
      <sharedTransformations hint="list:AddSharedClaimsTransformation">
        <!-- Adds an 'idp claim' type to the identity. -->
        <transformation name="set idp claim" type="Sitecore.Owin.Authentication.Services.SetIdpClaimTransform, Sitecore.Owin.Authentication" />
        <!-- Removes the specified claims from the identity to minimize cookie size. -->
        <transformation name="sanitize claims" type="Sitecore.Owin.Authentication.Services.RemoveClaims, Sitecore.Owin.Authentication">
          <claimTypes hint="list">
          </claimTypes>
        </transformation>
        <!-- If external authentication is configured with "TokenValidationParameters = {SaveSigninToken = true}", this saves the value from "claimsIdentity.BootstrapContext" to the "id_token" claim. -->
        <transformation name="set id_token claim" type="Sitecore.Owin.Authentication.Services.SaveIdTokenInClaim, Sitecore.Owin.Authentication" />
        <!-- To add a transformation, use the custom configuration file in the 'Include' folder - just create new file or use the existing file. 
             In 'configuration/sitecore/federatedAuthentication/sharedTransformations' create a new node with an appropriate node name, for example, "<someCustomTransform>"
             and set the key attribute with a unique id for the transformation.
             If you use the 'DefaultTransformation', in the new node, fill in the child nodes: sources - a list of claims in the identity which should be transformed, targets - a list of claims which should be added to the identity. 
             An example of sa transformation:-->
        <!--
            <someCustomTransform1 name="someCustomTransform1" type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
              <sources hint="raw:AddSource">
                <claim name="groups" />
              </sources>
              <targets hint="raw:AddTarget">
                <claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" />
              </targets>
              <keepSource>true</keepSource>
            </someCustomTransform1>
            <someCustomTransform2 name="someCustomTransform2" type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
              <sources hint="raw:AddSource">
                <claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" value="f04b11c5-323f-41e7-ab2b-d70cefb4e8d0" />
              </sources>
              <targets hint="raw:AddTarget">
                <claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" value="Sitecore\Developer" />
              </targets>
              <keepSource>true</keepSource>
            </someCustomTransform2>
        -->
        <!-- In this example, there are two transformations: 
                 The first transformation renames the claims with 'name=groups' to claims with 'name=http://schemas.microsoft.com/ws/2008/06/identity/claims/role'. 
                 The second transformation adds the azure group with the 'f04b11c5-323f-41e7-ab2b-d70cefb4e8d0' value to the 'Sitecore\Developer' sitecore security role.
                 The http://schemas.microsoft.com/ws/2008/06/identity/claims/role claim name is used for the claim roles. If you want to use roles, use this name to transform the role claims.-->
      </sharedTransformations>

      <propertyInitializer type="Sitecore.Owin.Authentication.Services.PropertyInitializer, Sitecore.Owin.Authentication">
        <maps hint="list">
          <!-- To add a property mapping, use the custom configuration file in the 'Include' folder - just create new file or use the existing file.
                   In the configuration/sitecore/federatedAuthentication/propertyInitializer/maps section, create a new node with name map. 
                   Fill in the 'name' and 'type' attributes. The value of the 'name' attribute should be unique for each mapping.
                   In the new node, fill in the child nodes: source - the claim name which should be mapped, target - the name of the property to which the source claim should be mapped. 
                   The mappings will affect every identity from every provider. 
                   Here is an example of a property mapping, where the value of the claim with 'name=http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress' is mapped to the 'Email' property :-->
          <!--
              <map name="Emailaddress to email" type="Sitecore.Owin.Authentication.Services.DefaultClaimToPropertyMapper, Sitecore.Owin.Authentication" resolve="true">
                <data hint="raw:AddData">
                  <source name="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress" />
                  <target name="Email" />
                </data>
              </map>
          -->
        </maps>
      </propertyInitializer>

    </federatedAuthentication>
  </sitecore>
</configuration>
