<?xml version="1.0" encoding="utf-8"?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
  <sitecore>
    <settings>
      <!--  OWIN ASSERT STAGE MARKERS
            Gets a value indicating whether exception should be thrown if processors are located in a wrong order
            in the owin.initialize pipeline.
            
            True if exception should be thrown when there is a middleware that is executed on
            a later stage than the next StageMarker processor specifies.
            
            Default value: true.
      -->
      <setting name="Owin.AssertStageMarkers" value="true" />
    </settings>
    <pipelines>
      <!--  OWIN INITIALIZE
            Configures OWIN middlewares. 
            The pipeline contains StageMarker processors that insert UseStageMarker middlewares with a corresponding PipelineStage value. 
            
            If "Owin.AssertStageMarkers" setting is set to "true" then an exception will be thrown if there is a middleware that is executed on
            a later stage than the following StageMarker processor specifies.
            
            It may happen when a custom processor uses UseStageMarker with a PipelineStage value that is lower than the previous StageMarker processor.
            For example, default UseCookieAuthentication middleware uses UseStageMarker(PipelineStage.Authenticate) under the hood;
            therefore, a processor that contains such a middleware should be patched before the Authenticate StageMarker processor. 
      -->
      <owin.initialize help="Processors should derive from Sitecore.Owin.Pipelines.Initialize.InitializeProcessor">
        <processor type="Sitecore.Owin.Pipelines.Initialize.SetGlobalExceptionHandler, Sitecore.Owin" resolve="true" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.SetLoggerFactory, Sitecore.Owin" resolve="true" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="Authenticate" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostAuthenticate" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="Authorize" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostAuthorize" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="ResolveCache" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostResolveCache" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="MapHandler" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.SetSessionStateBehavior, Sitecore.Owin" resolve="true" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostMapHandler" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="AcquireState" />
        <processor type="Sitecore.Owin.Pipelines.Initialize.StageMarker, Sitecore.Owin" method="PostAcquireState" />
      </owin.initialize>

      <!-- OWIN GLOBAL EXCEPTION HANDLER
           Handles unhandled exceptions that occured in OWIN middlewares.
      -->
      <owin.globalExceptionHandler help="Processors should derive from Sitecore.Owin.Pipelines.GlobalExceptionHandler.GlobalExceptionHandlerProcessor">
        <processor name="DefaultExceptionHandler" type="Sitecore.Owin.Pipelines.GlobalExceptionHandler.DefaultExceptionHandler, Sitecore.Owin" resolve="true">
          <enabled>true</enabled>
        </processor>
      </owin.globalExceptionHandler>

      <!-- GLOBAL LOG FILTER
           Standard Sitecore implementation of Microsoft.Owin.Logging.ILogger invokes this pipeline before submitting log data to the underlying logger.
           This pipeline provides an ability to modify an every aspect of the individual logging record as well as suppressing it.
      -->
      <owin.globalLogFilter help="Processors should derive from Sitecore.Owin.Pipelines.GlobalLogFilter.GlobalLogFilterProcessor">
      </owin.globalLogFilter>
    </pipelines>

    <services>
      <configurator type="Sitecore.Owin.Infrastructure.ServicesConfigurator, Sitecore.Owin" />
    </services>

    <log4net>
      <appender name="OwinLogFileAppender" type="log4net.Appender.RollingFileAppender, Sitecore.Logging">
        <file value="$(dataFolder)/logs/Owin.log.{date}.{time}.txt" />
        <appendToFile value="true" />
        <rollingStyle value="Size" />
        <maxSizeRollBackups value="-1" />
        <maximumFileSize value="10MB" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%4t %d{ABSOLUTE} %-5p %m%n" />
        </layout>
        <encoding value="utf-8" />
      </appender>
      <logger name="Sitecore.Owin.Diagnostics" additivity="false">
        <level value="INFO" />
        <appender-ref ref="OwinLogFileAppender" />
      </logger>
    </log4net>
  </sitecore>
</configuration>
